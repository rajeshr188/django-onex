# Generated by Django 3.2.5 on 2021-10-28 09:52

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('product', '0002_auto_20211006_1501'),
    ]
    stock_balance_sql = """
        WITH ss AS (
            SELECT DISTINCT ON (product_stockstatement.stock_id) product_stockstatement.id,
                product_stockstatement.method,
                product_stockstatement.sstype,
                product_stockstatement.created,
                product_stockstatement."Closing_wt",
                product_stockstatement."Closing_qty",
                product_stockstatement.total_wt_in,
                product_stockstatement.total_wt_out,
                product_stockstatement.total_qty_in,
                product_stockstatement.total_qty_out,
                product_stockstatement.stock_id
            FROM testp.product_stockstatement
            WHERE product_stockstatement.sstype::text = 'Stock'::text
            ORDER BY product_stockstatement.stock_id, product_stockstatement.created DESC
            )
        SELECT ss.stock_id,
            ss."Closing_wt",
            ss."Closing_qty",
            ( SELECT COALESCE(sum(product_stocktransaction.quantity), 0::bigint) AS sum
                FROM testp.product_stocktransaction
                WHERE product_stocktransaction.stock_id = ss.stock_id AND product_stocktransaction.created >= ss.created AND (product_stocktransaction.movement_type_id::text = ANY (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS in_qty,
            ( SELECT COALESCE(sum(product_stocktransaction.quantity), 0::bigint) AS sum
                FROM testp.product_stocktransaction
                WHERE product_stocktransaction.stock_id = ss.stock_id AND product_stocktransaction.created >= ss.created AND (product_stocktransaction.movement_type_id::text <> ALL (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS out_qty,
            ( SELECT COALESCE(sum(product_stocktransaction.weight), 0.0) AS sum
                FROM testp.product_stocktransaction
                WHERE product_stocktransaction.stock_id = ss.stock_id AND product_stocktransaction.created >= ss.created AND (product_stocktransaction.movement_type_id::text = ANY (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS in_wt,
            ( SELECT COALESCE(sum(product_stocktransaction.weight), 0.0) AS sum
                FROM testp.product_stocktransaction
                WHERE product_stocktransaction.stock_id = ss.stock_id AND product_stocktransaction.created >= ss.created AND (product_stocktransaction.movement_type_id::text <> ALL (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS out_wt
        FROM ss;
    """
    stockbatch_balance_sql = """
         WITH ss AS (
         SELECT DISTINCT ON (product_stockstatement.stock_batch_id) product_stockstatement.id,
            product_stockstatement.method,
            product_stockstatement.sstype,
            product_stockstatement.created,
            product_stockstatement."Closing_wt",
            product_stockstatement."Closing_qty",
            product_stockstatement.total_wt_in,
            product_stockstatement.total_wt_out,
            product_stockstatement.total_qty_in,
            product_stockstatement.total_qty_out,
            product_stockstatement.stock_id,
            product_stockstatement.stock_batch_id
           FROM testp.product_stockstatement
          WHERE product_stockstatement.sstype::text = 'Stockbatch'::text
          ORDER BY product_stockstatement.stock_batch_id, product_stockstatement.created DESC
        )
        SELECT ss.stock_id,
            ss.stock_batch_id,
            ss."Closing_wt",
            ss."Closing_qty",
            ( SELECT COALESCE(sum(product_stocktransaction.quantity), 0::bigint) AS sum
                FROM testp.product_stocktransaction
                WHERE product_stocktransaction.stock_batch_id = ss.stock_batch_id AND product_stocktransaction.created >= ss.created AND (product_stocktransaction.movement_type_id::text = ANY (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS in_qty,
            ( SELECT COALESCE(sum(product_stocktransaction.quantity), 0::bigint) AS sum
                FROM testp.product_stocktransaction
                WHERE product_stocktransaction.stock_batch_id = ss.stock_batch_id AND product_stocktransaction.created >= ss.created AND (product_stocktransaction.movement_type_id::text <> ALL (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS out_qty,
            ( SELECT COALESCE(sum(product_stocktransaction.weight), 0.0) AS sum
                FROM testp.product_stocktransaction
                WHERE product_stocktransaction.stock_batch_id = ss.stock_batch_id AND product_stocktransaction.created >= ss.created AND (product_stocktransaction.movement_type_id::text = ANY (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS in_wt,
            ( SELECT COALESCE(sum(product_stocktransaction.weight), 0.0) AS sum
                FROM testp.product_stocktransaction
                WHERE product_stocktransaction.stock_batch_id = ss.stock_batch_id AND product_stocktransaction.created >= ss.created AND (product_stocktransaction.movement_type_id::text <> ALL (ARRAY['P'::character varying::text, 'SR'::character varying::text, 'AD'::character varying::text, 'AR'::character varying::text]))) AS out_wt
        FROM ss;
    """
    operations = [
        migrations.RunSQL('DROP VIEW IF EXISTS ledger_balance;'),
        migrations.RunSQL(stock_balance_sql),
        migrations.RunSQL('DROP VIEW IF EXISTS account_balance;'),
        migrations.RunSQL(stockbatch_balance_sql),
    ]
